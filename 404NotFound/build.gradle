plugins {
    id 'java'
    id 'war'
    id 'eclipse-wtp'                           // Eclipse WTP facet 설정용
    id 'org.springframework.boot' version '3.4.9'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.pj'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

/** Eclipse WTP: Dynamic Web Module 5.0 */
eclipse.wtp.facet {
    // Change the version of the Dynamic Web Module facet
    facet name: 'jst.web', version: '5.0'
}

dependencies {
    // ===== Spring Boot Starters =====
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'       // (JPA에 포함되지만 명시 유지)
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // ===== DB Driver =====
    runtimeOnly 'com.mysql:mysql-connector-j'

    // ===== Lombok =====
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // ===== WAR 배포 시 톰캣은 외부(컨테이너) 제공 =====
    // 로컬에서 임베디드 톰캣으로 실행만 할 거면 implementation 으로 바꾸세요.
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    // ===== JSP/JSTL (Jakarta, Boot 3.x) =====
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'

    // 서블릿 API는 컨테이너/스타터가 제공 → 컴파일 전용으로만
    compileOnly 'jakarta.servlet:jakarta.servlet-api'

    // ===== Test =====
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add('-parameters')
}

tasks.named('test') {
    useJUnitPlatform()
}
